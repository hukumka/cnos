cscope 15 $HOME/0/cnos               0000051031
	@bin/0.c

2 
	$qwe
(){

3 
	}
}

4 
	$maö
(){

5 
	`qwe
();

6 
	}
}

	@common/ata.c

1 
	~<©a.h
>

2 
	~<ma¸os.h
>

4 
	#ATAPIO_BASE_ADDR
 0x1F0

	)

5 
	#ATAPIO_PORT_OFFSET_DATA
 0x0

	)

6 
	#ATAPIO_PORT_OFFSET_ERROR
 0x1

	)

7 
	#ATAPIO_PORT_OFFSET_FEATURES
 0x1

	)

8 
	#ATAPIO_PORT_OFFSET_SECTORCOUNT
 0x2

	)

9 
	#ATAPIO_PORT_OFFSET_LBA_0_7
 0x3

	)

10 
	#ATAPIO_PORT_OFFSET_LBA_8_15
 0x4

	)

11 
	#ATAPIO_PORT_OFFSET_LBA_16_23
 0x5

	)

12 
	#ATAPIO_PORT_OFFSET_HEAD
 0x6

	)

13 
	#ATAPIO_PORT_OFFSET_COMMAND
 0x7

	)

14 
	#ATAPIO_PORT_OFFSET_REGULARSTATUS
 0x7

	)

15 
	#ATAPIO_PORT_OFFSET_REGULARSTATUS2
 0x206

	)

17 
	#ATAPIO_STATUSFLAG_ERR
 0x1

	)

18 
	#ATAPIO_STATUSFLAG_DRQ
 0x8

	)

19 
	#ATAPIO_STATUSFLAG_SRV
 0x10

	)

20 
	#ATAPIO_STATUSFLAG_DF
 0x20

	)

21 
	#ATAPIO_STATUSFLAG_RDY
 0x40

	)

22 
	#ATAPIO_STATUSFLAG_BSY
 0x80

	)

24 
	#ATAPIO_COMMAND_READ
 0x20

	)

25 
	#ATAPIO_COMMAND_WRITE
 0x30

	)

26 
	#ATAPIO_COMMAND_CACHEFLUSH
 0xE7

	)

28 
	#SECTOR_SIZE
 512

	)

30 
	$ATAPIO_PﬁlSètus
(){

31 
uöt8
 
°©us
;

32 
åue
){

33 
°©us
 = 
	`öb
(
ATAPIO_BASE_ADDR
 + 
ATAPIO_PORT_OFFSET_REGULARSTATUS
);

34 if–(
°©us
 & 
ATAPIO_STATUSFLAG_BSY
)==0 && (°©u†& 
ATAPIO_STATUSFLAG_DRQ
)!=0 )

35  
ATAPIO_DONE
;

36 if–(
°©us
 & 
ATAPIO_STATUSFLAG_ERR
) )

37  
ATAPIO_ERROR
;

38 if–(
°©us
 & 
ATAPIO_STATUSFLAG_DF
) )

39  
ATAPIO_FAULT
;

41 
	}
}

43 
ölöe
 
	$Sñe˘DiskAndSe˘‹
–
drive
 
Drive
,
uöt32
 
addr
){

44 
	`outb
–
ATAPIO_BASE_ADDR
 + 
ATAPIO_PORT_OFFSET_HEAD
, 0xE0 | ((
uöt8
)
Drive
<<4Ë| ((
addr
>>24)&0xf) );

45 
	`outb
–
ATAPIO_BASE_ADDR
 + 
ATAPIO_PORT_OFFSET_LBA_0_7
, (
uöt8
)
addr
);

46 
	`outb
–
ATAPIO_BASE_ADDR
 + 
ATAPIO_PORT_OFFSET_LBA_8_15
, (
uöt8
)(
addr
>>8));

47 
	`outb
–
ATAPIO_BASE_ADDR
 + 
ATAPIO_PORT_OFFSET_LBA_16_23
, (
uöt8
)(
addr
>>16));

48 
	}
}

49 
ölöe
 
	$SídRódComm™d
(){

50 
	`outb
–
ATAPIO_BASE_ADDR
 + 
ATAPIO_PORT_OFFSET_COMMAND
, 
ATAPIO_COMMAND_READ
);

51 
	}
}

52 
ölöe
 
	$SídWrôeComm™d
(){

53 
	`outb
–
ATAPIO_BASE_ADDR
 + 
ATAPIO_PORT_OFFSET_COMMAND
, 
ATAPIO_COMMAND_WRITE
);

54 
	}
}

55 
ölöe
 
	$Pª∑ªAè
(){

56 
	`outb
–
ATAPIO_BASE_ADDR
 + 
ATAPIO_PORT_OFFSET_FEATURES
, 
NULL
 );

57 
	}
}

58 
ölöe
 
	$SëCou¡OfU£bÀSe˘‹s
(
uöt8
 
cou¡
){

59 
	`outb
–
ATAPIO_BASE_ADDR
 + 
ATAPIO_PORT_OFFSET_SECTORCOUNT
, 
cou¡
 );

60 
	}
}

63 
ölöe
 
	$RódSe˘‹
–
uöt16
* 
d°
 ){

64 
	`ªpInsw
–
ATAPIO_BASE_ADDR
 + 
ATAPIO_PORT_OFFSET_DATA
, 
d°
, 0x100);

65 
	}
}

67 
ölöe
 
	$WrôeSe˘‹
–
uöt16
* 
§c
 ){

68 
asm
 volatile(

74 :: "Nd"(
ATAPIO_BASE_ADDR
+
ATAPIO_PORT_OFFSET_DATA
),"S"(
§c
), "c"(0x100)

76 
	}
}

79 
	$ATAPIO_Ród
–
uöt32
 
addr
, 
uöt8
 
cou¡
, 
drive
 
Drive
, * 
d°
){

80 
	`Pª∑ªAè
();

81 
	`SëCou¡OfU£bÀSe˘‹s
(
cou¡
);

82 
	`Sñe˘DiskAndSe˘‹
–
Drive
,
addr
 );

83 
	`SídRódComm™d
();

84 
°©us
, 
i
;

85 
i
=0;i<
cou¡
;++i){

86 
°©us
=
	`ATAPIO_PﬁlSètus
();

87 if–
°©us
!=
ATAPIO_DONE
 )

88  
°©us
;

89 
	`RódSe˘‹
––(
uöt16
*)
d°
 + (
SECTOR_SIZE
/(uöt16))*
i
 ) );

91  
ATAPIO_DONE
;

92 
	}
}

94 
	$ATAPIO_Wrôe
–
uöt32
 
addr
, 
uöt8
 
cou¡
, 
drive
 
Drive
, c⁄° * 
§c
){

95 
	`Pª∑ªAè
();

96 
	`SëCou¡OfU£bÀSe˘‹s
(
cou¡
);

97 
	`Sñe˘DiskAndSe˘‹
–
Drive
,
addr
 );

98 
	`SídWrôeComm™d
–
addr
 );

99 
°©us
, 
i
;

100  
i
=0; i<
cou¡
; ++i){

101 
°©us
=
	`ATAPIO_PﬁlSètus
();

102 if–
°©us
!=
ATAPIO_DONE
 )

103  
°©us
;

104 
	`WrôeSe˘‹
–(
uöt16
*)
§c
 + (
SECTOR_SIZE
/(uöt16))*
i
 );

106  
ATAPIO_DONE
;

107 
	}
}

	@common/fs/fat32.c

1 
	~"Át32_lowLevñ.h
"

2 
	~<˙_°rög.h
>

3 
	~<mem‹y.h
>

4 
	~<fs.h
>

6 
uöt32
 
	gcuºítDúe˘‹y
;

7 
uöt32
 
	gcuºítClu°î
=0;

8 
uöt32
 
	gªlﬂdFœg
;

10 
uöt32
 
	gcuºítDúMembî
;

12 
boﬁ
 
	$C‹ª˘Clu°î
–
uöt32
 
˛
){

13  
˛
>2 && cl<0xf000000;

14 
	}
}

16 
	$F©32_Sñe˘Dúe˘‹y
–
uöt32
 
˛u°î
 ){

17 if–
cuºítClu°î
 !
˛u°î
 )

18 
ªlﬂdFœg
 = 
åue
;

19 
cuºítDúMembî
 = 0;

20 
cuºítClu°î
 = 
cuºítDúe˘‹y
 = 
˛u°î
;

21 
	}
}

23 
boﬁ
 
	$F©32_GëDúNextMembî
–
F©32_DúMembî
 * 
ªzu…
 ){

24 if–
cuºítDúMembî
==
CuºítP¨ams
.
Se˘‹sPîClu°î
*(512/32) ){

25 
cuºítClu°î
 = 
	`F©32_NextClu°î
( currentCluster );

26 if–!
	`C‹ª˘Clu°î
(
cuºítClu°î
) ){

27 
	`F©32_Sñe˘Dúe˘‹y
–
cuºítDúe˘‹y
 );

28  
Ál£
;

30 
ªlﬂdFœg
 = 
åue
;

32 if–
ªlﬂdFœg
 ){

33 
cuºítDúMembî
 = 0;

34 
	`F©32_LﬂdClu°î
–
cuºítClu°î
, 
Clu°îD©a
 );

35 
ªlﬂdFœg
 = 
Ál£
;

37 
ªzu…
->
©åibByã
 = 
Clu°îD©a
[
cuºítDúMembî
*32 + 0xB];

38 if–
ªzu…
->
©åib
.
ªad⁄ly
 &&Ñezu…->©åib.
hiddí
 &&Ñezu…->©åib.
sy°em
 &&Ñezu…->©åib.
vﬁumeId
 ){

39 
cuºítDúMembî
++;

40  
	`F©32_GëDúNextMembî
(
ªzu…
);

42 
i
=0;i<11;++i)

43 
ªzu…
->
fûíame
[
i
] = 
Clu°îD©a
[
cuºítDúMembî
*32 + i];

44 if–
ªzu…
->
fûíame
[0] == 0 )

45  
Ál£
;

46 
ªzu…
->
©åibByã
 = 
Clu°îD©a
[
cuºítDúMembî
*32 + 0xB];

47 
ªzu…
->
fú°Clu°î
 = *(
uöt16
*)(
Clu°îD©a
 + 
cuºítDúMembî
*32 + 0x14);

48 
ªzu…
->
fú°Clu°î
 =Ñezu…->fú°Clu°î<<16 | *(
uöt16
*)(
Clu°îD©a
 + 
cuºítDúMembî
*32 + 0x1A);

49 
ªzu…
->
fûeSize
 = *(
uöt32
*)(
Clu°îD©a
 + 
cuºítDúMembî
*32 + 0x1C);

50 
ªzu…
->
ªc‹dClu°î
 = 
cuºítClu°î
;

51 
ªzu…
->
ªc‹dId
 = 
cuºítDúMembî
;

52 
cuºítDúMembî
++;

53  
åue
;

54 
	}
}

56 
	$F©32_NameToSh‹t
–c⁄° *
«me
, * 
ªzu…
){

57 
i
,
j
;

58  
i
=0; i<8 && 
«me
[i]!='.' &&Çame[i]!=0; ++i){

59 
ªzu…
[
i
] = 
«me
[i];

60 if–
ªzu…
[
i
]>='a' &&Ñezult[i]<='z' )

61 
ªzu…
[
i
] += 'A'-'a';

63 if–
i
==8 )

64 
ªzu…
[7]='~';

65 
j
=
i
;j<8;++j)

66 
ªzu…
[
j
]=' ';

67  ; 
«me
[
i
]!='.' &&Çame[i]!=0; ++i)

69 if–
«me
[
i
] == '.' ){

70 ++
i
;

71  
j
=8; j<11 && 
«me
[
i
]!=0; ++j, ++i){

72 
ªzu…
[
j
]=
«me
[
i
];

73 if–
ªzu…
[
j
]>='a' &&Ñezult[j]<='z' )

74 
ªzu…
[
j
] += 'A'-'a';

77  
j
=8; j<11; ++j )

78 
ªzu…
[
j
]=' ';

80 
	}
}

82 
boﬁ
 
	$F©32_SórchMembîO√
–c⁄° *
«me
, 
F©32_DúMembî
 *
ªzu…
 ){

83 
	`F©32_Sñe˘Dúe˘‹y
–
cuºítDúe˘‹y
 );

84 
sh‹tName
[11];

85 
	`F©32_NameToSh‹t
(
«me
, 
sh‹tName
);

86  
	`F©32_GëDúNextMembî
–
ªzu…
 ) ){

88 if–
ªzu…
->
fûíame
[0] == 0 )

89  
Ál£
;

90 if–
ªzu…
->
fûíame
[0] == 0xe5 )

92 if–
	`°rcm∂
–
ªzu…
->
fûíame
, 
sh‹tName
, 11) == 0 )

93  
åue
;

95  
Ál£
;

96 
	}
}

98 
boﬁ
 
	$F©32_SórchMembî
–
uöt32
 
ba£Dú
,c⁄° *
∑th
, 
F©32_DúMembî
 *
ªzu…
 ){

99 
i
=0,
j
=0;

100 
fûíame
[256];

101 
	`F©32_Sñe˘Dúe˘‹y
–
ba£Dú
 );

102  ; 
∑th
[
i
]; ++i){

103 if–
∑th
[
i
]=='/' ){

104 
fûíame
[
j
]=0;

105 if–
	`F©32_SórchMembîO√
–
fûíame
, 
ªzu…
) )

106 if–
ªzu…
->
©åib
.
dúe˘‹y
 )

107 
	`F©32_Sñe˘Dúe˘‹y
–
ªzu…
->
fú°Clu°î
 );

109  
Ál£
;

111  
Ál£
;

112 
j
=0;

114 
fûíame
[
j
++] = 
∑th
[
i
];

117 if–
j
==0 )

118  
åue
;

119 
fûíame
[
j
]=0;

120  
	`F©32_SórchMembîO√
–
fûíame
, 
ªzu…
 );

121 
	}
}

123 
boﬁ
 
	$F©32_›í
–
uöt32
 
ba£Dú
, c⁄° *
∑th
, 
FAT32_FILE
 *
f
 ){

124 
F©32_DúMembî
 
mem
;

125 if–
	`F©32_SórchMembî
–
ba£Dú
, 
∑th
, &
mem
 ) ){

126 if–
mem
.
©åib
.
dúe˘‹y
 )

127  
Ál£
;

128 
f
->
buf„r
 = (
uöt8
*)
	`AŒoˇã
–
CuºítP¨ams
.
Se˘‹sPîClu°î
 );

129 
f
->
fûeSy°em
 = 0xC;

130 
f
->
fú°Clu°î
 = 
mem
.firstCluster;

131 
f
->
fûeSize
 = 
mem
.fileSize;

132 
f
->
poöãr
 = 0;

133 
f
->
ªc‹dClu°î
 = 
mem
.recordCluster;

134 
f
->
ªc‹dId
 = 
mem
.recordId;

135  
åue
;

137  
Ál£
;

138 
	}
}

140 
	$F©32_RewrôeHód
–
FAT32_FILE
 *
f
 ){

141 
uöt32
 
˛u°î
 = 
f
->
ªc‹dClu°î
;

142 
	`F©32_LﬂdClu°î
–
˛u°î
, 
Clu°îD©a
 );

143 *(
uöt32
*)(
Clu°îD©a
 + 32 * 
f
->
ªc‹dId
 + 0x1CËf->
fûeSize
;

144 
	`F©32_SaveClu°î
–
˛u°î
, 
Clu°îD©a
 );

145 
	}
}

148 
uöt32
 
	$F©32_Ród
–
FAT32_FILE
 *
f
, *
d©a
, 
uöt32
 
size
 ){

149 
uöt32
 
˛u°î
 = 
f
->
fú°Clu°î
;

150 
uöt32
 
˛u°îSize
 = 512 * 
CuºítP¨ams
.
Se˘‹sPîClu°î
;

151 
i
;

152  
i
=
˛u°îSize
; i<
f
->
poöãr
; i+=clusterSize)

153 
˛u°î
 = 
	`F©32_NextClu°î
( cluster );

154 
	`F©32_LﬂdClu°î
–
˛u°î
, 
f
->
buf„r
 );

155  
i
=0; (
f
->
poöãr
 + i < f->
fûeSize
Ë&& (ò< 
size
); i++ ){

156 if–(
f
->
poöãr
+
i
Ë% 
˛u°îSize
 == 0 && i!=0 ){

157 
˛u°î
 = 
	`F©32_NextClu°î
( cluster );

158 
	`F©32_LﬂdClu°î
–
˛u°î
, 
f
->
buf„r
);

160 *–((*)
d©a
Ë+ 
i
Ë
f
->
buf„r
[ (f->
poöãr
+i)%
˛u°îSize
 ];

162 
f
->
poöãr
 +
i
;

163  
i
;

164 
	}
}

167 
uöt32
 
	$F©32_Wrôe
–
FAT32_FILE
 *
f
, *
d©a
, 
uöt32
 
size
 ){

168 
uöt32
 
˛u°î
 = 
f
->
fú°Clu°î
;

169 
uöt32
 
˛u°îSize
 = 512 * 
CuºítP¨ams
.
Se˘‹sPîClu°î
;

170 
i
=0,
j
=2;

171 if–!
	`C‹ª˘Clu°î
(
f
->
fú°Clu°î
) ){

172 ; 
FAT
[0][
j
]!=0x0; ++j)

173 if–
j
 >
CuºítP¨ams
.
Se˘‹sPîF©
*128 )

175 
f
->
fú°Clu°î
 = 
j
;

176 
FAT
[0][
j
]=0xffffffff;

178  
i
=
˛u°îSize
; i<
f
->
poöãr
; i+=clusterSize)

179 
˛u°î
 = 
	`F©32_NextClu°î
( cluster );

180 
	`F©32_LﬂdClu°î
–
˛u°î
, 
f
->
buf„r
 );

181  
i
=0; (
f
->
poöãr
+ò< f->
fûeSize
Ë&& ( i<
size
 ); ++i ){

182 if–(
f
->
poöãr
+
i
Ë% 
˛u°îSize
 == 0 && i!=0 ){

183 
	`F©32_SaveClu°î
–
˛u°î
, 
f
->
buf„r
);

184 
˛u°î
 = 
	`F©32_NextClu°î
( cluster );

185 if–
f
->
poöãr
 + 
i
 + 
˛u°îSize
 > 
size
 ){

186 
	`F©32_LﬂdClu°î
–
˛u°î
, 
f
->
buf„r
 );

189 
f
->
buf„r
[ (f->
poöãr
+
i
)%
˛u°îSize
 ] = *–((*)
d©a
) + i);

191  ; 
i
<
size
; ++i ){

192 if–(
f
->
poöãr
 + 
i
)%
˛u°îSize
 == 0 ){

193  ; 
FAT
[0][
j
]!=0x0 ; ++j )

194 if–
j
 >
CuºítP¨ams
.
Se˘‹sPîF©
*128 ){

195 
œbñ_exô
;

197 if–
	`C‹ª˘Clu°î
–
˛u°î
 ) )

198 
FAT
[0][ 
˛u°î
 ] = 
j
;

199 
FAT
[0][ 
j
 ] = 0xffffffff;

200 
˛u°î
 = 
j
;

202 
f
->
buf„r
[ (f->
poöãr
+
i
)%
˛u°îSize
 ] = *–((*)
d©a
) + i);

204 
œbñ_exô
:

205 if–
j
!=2 )

206 
	`F©32_SaveF©
( 0 );

207 
	`F©32_SaveClu°î
–
˛u°î
, 
f
->
buf„r
 );

208 if–
f
->
fûeSize
 < f->
poöãr
 + 
i
 ){

209 
f
->
fûeSize
 = f->
poöãr
 + 
i
;

210 
	`F©32_RewrôeHód
–
f
 );

212  
i
;

213 
	}
}

215 
	$F©32_Sìk
–
FAT32_FILE
 *
f
, 
uöt8
 
SìkTy≥
, 
öt32
 
move
){

216  
SìkTy≥
 ){

217 
FILE_SEEK_FROMSTART
:

218 if–
move
<=0 ){

219 
f
->
poöãr
 = 0;

222 if–
move
 < 
f
->
fûeSize
 )

223 
f
->
poöãr
 = 
move
;

225 
f
->
poöãr
 = f->
fûeSize
;

227 
FILE_SEEK_FROMEND
:

228 if–
move
<=0 ){

229 
f
->
poöãr
 = f->
fûeSize
;

232 if–
move
 < 
f
->
fûeSize
 )

233 
f
->
poöãr
 = f->
fûeSize
 - f->pointer;

235 
f
->
poöãr
 = 0;

237 
FILE_SEEK_OFFSET
:

238 if–
f
->
poöãr
 < -
move
 )

239 
f
->
poöãr
 = 0;

240 if–
f
->
poöãr
 > f->
fûeSize
 - 
move
 )

241 
f
->
poöãr
 = f->
fûeSize
;

243 
f
->
poöãr
 +
move
;

246 
	}
}

248 
	$F©32_FûeClo£
–
FAT32_FILE
 *
f
){

249 
	`Fªe
–
f
->
buf„r
, 
CuºítP¨ams
.
Se˘‹sPîClu°î
);

250 
	}
}

252 
	$F©32_DñëeFûe
–
F©32_DúMembî
 *
f
){

253 
uöt32
 
˛
 = 
f
->
fú°Clu°î
;

254 
uöt32
 
p˛
;

256 if–
f
->
©åib
.
dúe˘‹y
 ){

257 
F©32_DúMembî
 
chûd
;

258 
	`F©32_Sñe˘Dúe˘‹y
–
˛
 );

260 
	`F©32_GëDúNextMembî
–&
chûd
 );

261 
	`F©32_GëDúNextMembî
–&
chûd
 );

262  
	`F©32_GëDúNextMembî
–&
chûd
 ) ){

263 
	`F©32_DñëeFûe
–&
chûd
 );

267  
	`C‹ª˘Clu°î
(
˛
) ){

268 
p˛
 = 
˛
;

269 
˛
 = 
	`F©32_NextClu°î
( cl );

270 
FAT
[0][
p˛
] = 0;

273 if–
f
->
ªc‹dClu°î
 ){

274 
uöt32
 
˛1
 = 
	`F©32_NextClu°î
–
f
->
ªc‹dClu°î
 );

275 if–
	`C‹ª˘Clu°î
(
˛1
)){

276 
boﬁ
 
Êag
 = 
åue
;

277  
Êag
 && 
	`C‹ª˘Clu°î
(
˛1
) ){

278 
	`F©32_LﬂdClu°î
–
˛1
, 
Clu°îD©a
 );

279  
i
=0; i<
CuºítP¨ams
.
Se˘‹sPîClu°î
*16; ++i ){

280 if–
Clu°îD©a
[
i
*32] == 0xe5 )

282 if–
Clu°îD©a
[
i
*32] != 0 )

283 
Êag
 = 
Ál£
;

286 if–
Êag
 ){

287 
uöt32
 
tmp
 = 
	`F©32_NextClu°î
–
˛1
 );

288 
FAT
[0][
˛1
] = 0;

289 
˛1
 = 
tmp
;

292 
FAT
[0][
f
->
ªc‹dClu°î
] = 
˛1
;

295 
	`F©32_SaveF©
(0);

297 
	`F©32_LﬂdClu°î
(
f
->
ªc‹dClu°î
, 
Clu°îD©a
);

299 if–
Clu°îD©a
[ (
f
->
ªc‹dId
+1)*32 ] =0 || ( 
	`C‹ª˘Clu°î
(
FAT
[0][f->
ªc‹dClu°î
]Ë&& f->ªc‹dId==
CuºítP¨ams
.
Se˘‹sPîClu°î
*16 ) ){

301  
i
 = 
f
->
ªc‹dId
; i>=0 && 
Clu°îD©a
[i*32]==0xe5; --i)

302 
Clu°îD©a
[
i
*32]=0;

305 
Clu°îD©a
[
f
->
ªc‹dId
*32] = 0xe5;

307 
	`F©32_SaveClu°î
–
f
->
ªc‹dClu°î
, 
Clu°îD©a
);

308 
	}
}

310 
boﬁ
 
	$F©32_DúAddMembî
–
F©32_DúMembî
* 
dú
, F©32_DúMembî* 
mem
){

311 
uöt32
 
˛u°î
, 
nc
=
dú
->
fú°Clu°î
;

312 
i
,
j
;

313 if–
nc
 == 0){

314 
i
=2; 
FAT
[0][i]!=0; ++i )

315 if–
i
 =128*
CuºítP¨ams
.
Se˘‹sPîF©
 )

316  
Ál£
;

319 
˛u°î
 = 
nc
;

320 
	`F©32_LﬂdClu°î
–
˛u°î
, 
Clu°îD©a
);

321  
i
=0; i<16*
CuºítP¨ams
.
Se˘‹sPîClu°î
; ++i){

322 if–
Clu°îD©a
[
i
*32] == 0xe5 ){

323 
	`F©32_LﬂdClu°î
(
˛u°î
, 
Clu°îD©a
);

324 
wrôe
;

325 }if–
Clu°îD©a
[
i
*32]==0){

326 if–
i
 =16*
CuºítP¨ams
.
Se˘‹sPîClu°î
-1 ){

327  
j
=2; 
FAT
[0][j] != 0; ++j)

328 if–
j
 =
CuºítP¨ams
.
Se˘‹sPîF©
*128 )

329  
Ál£
;

330 
FAT
[0][
˛u°î
] = 
j
;

331 
j
=
Clu°îD©a
[0];

332 
Clu°îD©a
[0]=0;

333 
	`F©32_SaveClu°î
–
j
, 
Clu°îD©a
);

334 
Clu°îD©a
[0]=
j
;

335 
	`F©32_SaveF©
(0);

337 
Clu°îD©a
[(
i
+1)*32]=0;

339 
wrôe
;

342 
nc
 = 
	`F©32_NextClu°î
(
˛u°î
);

343 } 
	`C‹ª˘Clu°î
(
nc
) );

344  
j
=2; 
FAT
[0][j] != 0; ++j)

345 if–
j
 =
CuºítP¨ams
.
Se˘‹sPîF©
*128 )

346  
Ál£
;

347 
FAT
[0][
˛u°î
] = 
j
;

348 
	`F©32_SaveF©
(0);

349 
˛u°î
=
j
;

350 
	`F©32_LﬂdClu°î
(
˛u°î
, 
Clu°îD©a
);

351 
i
 = 0;

352 
Clu°îD©a
[32]=0;

353 
wrôe
:

354 
j
=0; j<11; ++j)

355 
Clu°îD©a
[
i
*32+
j
] = 
mem
->
fûíame
[j];

356 
Clu°îD©a
[
i
*32+0xB] = 
mem
->
©åibByã
;

357 *(
uöt16
*)(
Clu°îD©a
 + 
i
*32 + 0x14Ë(uöt16)(
mem
->
fú°Clu°î
>>16);

358 *(
uöt16
*)(
Clu°îD©a
 + 
i
*32 + 0x1AË(uöt16)(
mem
->
fú°Clu°î
);

359 *(
uöt32
*)(
Clu°îD©a
 + 
i
*32 + 0x1CË(uöt32)(
mem
->
fûeSize
);

360 
	`F©32_SaveClu°î
–
˛u°î
, 
Clu°îD©a
);

361  
åue
;;

362 
	}
}

364 
boﬁ
 
	$F©32_Cª©eFûe
–c⁄° *
∑th
, c⁄° *
fûíame
, 
boﬁ
 
dú
){

365 
F©32_DúMembî
 
mem
,
√w
;

366 if–!
	`F©32_SórchMembî
–
CuºítP¨ams
.
RoŸDúClu°î
, 
∑th
, &
mem
 ) )

367  
Ál£
;

368 if–!
mem
.
©åib
.
dúe˘‹y
 )

369  
Ál£
;

370 
	`F©32_NameToSh‹t
(
fûíame
, 
√w
.filename);

371 
√w
.
©åib
.
ªad⁄ly
 = 0;

372 
√w
.
©åib
.
hiddí
 = 0;

373 
√w
.
©åib
.
sy°em
 = 0;

374 
√w
.
©åib
.
vﬁumeId
 = 0;

375 
√w
.
©åib
.
dúe˘‹y
 = (
dú
!=0);

376 
√w
.
©åib
.
¨chive
 = 0;

377 
√w
.
©åib
.
unu£d
 = 0;

378 
√w
.
fûeSize
 = 0;

379 
√w
.
fú°Clu°î
 = 0;

380  
	`F©32_DúAddMembî
–&
mem
, &
√w
);

381 
	}
}

	@common/fs/fat32_lowLevel.c

1 
	~<ty≥s.h
>

2 
	~<©a.h
>

3 
	~<Át32.h
>

4 
	~<mem‹y.h
>

5 
	~"Át32_lowLevñ.h
"

8 
	#BYTE_PER_SECTOR_OFFSET
 0xB

9 
	#NUMBER_OF_FATS
 0x10

	)

10 
	#SIGNATURE_OFFSET
 0x1FE

	)

11 
	#NUMBER_OF_REVERSED_SECTORS_OFFSET
 0xE

	)

12 
	#SECTORS_PER_FAT_OFFSET
 0x24

	)

13 
	#ROOT_DIRECTORY_FIRST_CLUSTER_OFFSET
 0x2C

	)

14 
	#SECTOR_PER_CLUSTER_OFFSET
 0xD

	)

16 
uöt8
 
	gbuf„r0
[ 
SECTOR_SIZE
 ];

17 
uöt32
* 
	gFAT
[2]={0,0};

18 
uöt32
 
	gSe˘‹sPîF©_Old
=0;

19 
uöt8
 *
	gClu°îD©a
;

20 
uöt32
 
	gClu°îSize_ﬁd
=0;

22 
Át32_cuº∑øms
 
	gCuºítP¨ams
;

24 
boﬁ
 
	$F©32_LﬂdF©
(
uöt8
 
id
){

25 if(
id
>=2)

26  
Ál£
;

27 if–
FAT
[
id
] )

28 
	`Fªe
–
FAT
[
id
], 
Se˘‹sPîF©_Old
);

29 
FAT
[
id
] = (
uöt32
*)
	`AŒoˇã
–
CuºítP¨ams
.
Se˘‹sPîF©
 );

30 
Se˘‹sPîF©_Old
 = 
CuºítP¨ams
.
Se˘‹sPîF©
;

31 if–
	`ATAPIO_Ród
–
CuºítP¨ams
.
F©Begö
 + 
id
*CuºítP¨ams.
Se˘‹sPîF©
, CuºítP¨ams.Se˘‹sPîF©, 
ma°î
, 
FAT
[id] ) =
ATAPIO_DONE
 )

32  
åue
;

33  
Ál£
;

34 
	}
}

35 
boﬁ
 
	$F©32_SaveF©
(
uöt8
 
id
){

36 if(
id
>=2)

37  
Ál£
;

38  
	`ATAPIO_Wrôe
–
CuºítP¨ams
.
F©Begö
 + 
id
*CuºítP¨ams.
Se˘‹sPîF©
, CuºítP¨ams.Se˘‹sPîF©, 
ma°î
, 
FAT
[id] );

39 
	}
}

41 
boﬁ
 
	$F©32_Inô
–
uöt32
 
vﬁumeId_£˘‹
 ){

42 
	`ATAPIO_Ród
–
vﬁumeId_£˘‹
, 1, 
ma°î
, 
buf„r0
 );

43 if–*(
uöt16
*)–
buf„r0
 + 
BYTE_PER_SECTOR_OFFSET
) != 512 )

44  
Ál£
;

45 if–*(
uöt8
*)–
buf„r0
 + 
NUMBER_OF_FATS
) != 2 )

46  
Ál£
;

47 if–*(
uöt16
*)–
buf„r0
 + 
SIGNATURE_OFFSET
 ) != 0xAA55 )

48  
Ál£
;

49 
CuºítP¨ams
.
Se˘‹sPîF©
 = *(
uöt32
*)–
buf„r0
 + 
SECTORS_PER_FAT_OFFSET
 );

50 
CuºítP¨ams
.
Se˘‹sPîClu°î
 = *(
uöt8
*)–
buf„r0
 + 
SECTOR_PER_CLUSTER_OFFSET
 );

51 
CuºítP¨ams
.
F©Begö
 = 
vﬁumeId_£˘‹
 + *(
uöt16
*)–
buf„r0
 + 
NUMBER_OF_REVERSED_SECTORS_OFFSET
);

52 
CuºítP¨ams
.
Clu°îsBegö
 = CuºítP¨ams.
F©Begö
 + 2*CuºítP¨ams.
Se˘‹sPîF©
;

53 
CuºítP¨ams
.
RoŸDúClu°î
 = *(
uöt32
*)–
buf„r0
 + 
ROOT_DIRECTORY_FIRST_CLUSTER_OFFSET
 );

55 if(!
	`F©32_LﬂdF©
(0))

56  
Ál£
;

57 if–
Clu°îSize_ﬁd
 )

58 
	`Fªe
–
Clu°îD©a
, 
Clu°îSize_ﬁd
);

59 
Clu°îD©a
 = 
	`AŒoˇã
–
CuºítP¨ams
.
Se˘‹sPîClu°î
 );

60 
Clu°îSize_ﬁd
 = 
CuºítP¨ams
.
Se˘‹sPîClu°î
;

62 
	`F©32_Sñe˘Dúe˘‹y
–
CuºítP¨ams
.
RoŸDúClu°î
 );

63  
åue
;

64 
	}
}

66 
uöt32
 
	$F©32_NextClu°î
–
uöt32
 
˛u°î
 ){

67  
FAT
[0][
˛u°î
];

68 
	}
}

69 
boﬁ
 
	$F©32_LﬂdClu°î
–
uöt32
 
˛u°î
, *
d©a
 ){

70  
	`ATAPIO_Ród
–
CuºítP¨ams
.
Clu°îsBegö
 + (
˛u°î
-2Ë* CuºítP¨ams.
Se˘‹sPîClu°î
, CuºítP¨ams.Se˘‹sPîClu°î, 
ma°î
, 
d©a
);

71 
	}
}

72 
boﬁ
 
	$F©32_SaveClu°î
–
uöt32
 
˛u°î
, *
d©a
 ){

73  
	`ATAPIO_Wrôe
–
CuºítP¨ams
.
Clu°îsBegö
 + (
˛u°î
-2Ë* CuºítP¨ams.
Se˘‹sPîClu°î
, CuºítP¨ams.Se˘‹sPîClu°î, 
ma°î
, 
d©a
);

74 
	}
}

	@common/fs/fat32_lowLevel.h

1 
	~<Át32.h
>

3 
boﬁ
 
F©32_LﬂdF©
(
uöt8
);

4 
boﬁ
 
F©32_SaveF©
(
uöt8
);

6 
boﬁ
 
F©32_Inô
–
uöt32
 );

8 
boﬁ
 
F©32_LﬂdClu°î
–
uöt32
, * );

9 
boﬁ
 
F©32_SaveClu°î
–
uöt32
, * );

10 
uöt32
 
F©32_NextClu°î
( uint32 );

12 
	sÁt32_cuº∑øms
{

13 
uöt32
 
	mSe˘‹sPîF©
;

14 
uöt8
 
	mSe˘‹sPîClu°î
;

15 
uöt32
 
	mRoŸDúClu°î
;

16 
uöt32
 
	mF©Begö
;

17 
uöt32
 
	mClu°îsBegö
;

20 
Át32_cuº∑øms
 
CuºítP¨ams
;

21 
uöt32
 *
FAT
[2];

22 
uöt8
 *
Clu°îD©a
;

	@common/fs/fs.c

1 
	~<Át32.h
>

2 
	~<©a.h
>

4 
	gbuf„r
[512];

6 
	#PARTITION_BASE
 446

	)

7 
	#PARTITION_SIZE
 16

	)

8 
	#PR_TYPE_OFFSET
 4

	)

9 
	#PR_LBABEGIN_OFFSET
 8

	)

11 
uöt8
 
	gFS_Ty≥
[4];

12 
uöt8
 
	gFS_VﬁumeIdSe˘‹
[4];

14 
	$LﬂdP¨tôi⁄s
(){

15 
	`ATAPIO_Ród
(0,1,
ma°î
,
buf„r
);

16 
i
=0;i<4;++i){

17 
FS_Ty≥
[
i
] = 
buf„r
[ 
PARTITION_BASE
 + i*
PARTITION_SIZE
 + 
PR_TYPE_OFFSET
 ];

18 
FS_VﬁumeIdSe˘‹
[
i
] = *(
uöt32
*)(
buf„r
 + 
PARTITION_BASE
 + i*
PARTITION_SIZE
 + 
PR_LBABEGIN_OFFSET
);

20 
	}
}

28 
uöt32
 
	$Sñe˘Disk
–
uöt8
 
id
 ){

29  
FS_Ty≥
[
id
] ){

31  
	`F©32_Inô
–
FS_VﬁumeIdSe˘‹
[
id
] );

35 
	}
}

	@common/io.c

1 
	~<io.h
>

7 
uöt8
 
	gX
=0,
	gY
=0;

8 
uöt8
 
	gCuºítCﬁ‹
=0x07;

9 
uöt8
 
	gèb°›
=0x4;

11 
	$CÀ¨S¸ìn
(){

12 
i
=0;i<
SCREEN_WIDTH
*
SCREEN_HEIGHT
;++i)

13 
VIDEOBUFFER
[
i
]=0;

14 
X
=
Y
=0;

15 
	}
}

17 
	$putch¨
–
a
){

18  
a
 ){

21 
	`PUTC_POS
(' ',
CuºítCﬁ‹
,
X
,
Y
);

22 ++
X
;

23 } 
X
%
èb°›
 );

26 if(
X
>0){

27 --
X
;

28 
	`PUTC_POS
(' ',
CuºítCﬁ‹
,
X
-1,
Y
);

32 ++
Y
;

34 
X
=0;

37 
	`PUTC_POS
(
a
,
CuºítCﬁ‹
,
X
,
Y
);

38 ++
X
;

40 if–
X
>=
SCREEN_WIDTH
 ){

41 ++
Y
;

42 
X
=0;

44 if–
Y
>=
SCREEN_HEIGHT
 )

45 
	`CÀ¨S¸ìn
();

46 
	}
}

48 
	$¥ötf_d
(
d
){

49 
°r
[10];

50 
i
=0;

51 
d
){

52 
°r
[
i
]=
d
%10+0x30;

53 
d
/=10;

54 ++
i
;

56 
i
>0){

57 --
i
;

58 
	`putch¨
(
°r
[
i
]);

60 
	}
}

61 
	$¥ötf_s
(c⁄° *
s
){

62 
i
=0;
s
[i];++i)

63 
	`putch¨
(
s
[
i
]);

64 
	}
}

66 
	$¥ötf
–c⁄° *
f‹m©
, ...){

67 
cou¡
=0;

68 *
p
 = (*)&
f‹m©
+(*);

69 
i
=0; 
f‹m©
[i]; ++i){

70 if–
f‹m©
[
i
]=='%' ){

71 
i
++;

72 
f‹m©
[
i
]){

74  
cou¡
;

76 
	`putch¨
('%');

79 
	`¥ötf_d
–*(*)
p
);

80 
p
+=();

81 
cou¡
++;

84 
	`¥ötf_s
–*(**)(
p
) );

85 
p
+=(*);

86 
cou¡
++;

89 
	`putch¨
(
f‹m©
[
i
]);

92 
	`putch¨
(
f‹m©
[
i
]);

95  
cou¡
;

96 
	}
}

102 
	$gëch¨
(){

104 
	}
}

	@common/memory.c

1 
	~<mem‹y.h
>

3 
	#KB
 0x400

	)

4 
	#MB
 (0x400*
KB
)

	)

6 
	#MEMORY_TABLE_BASE
 ((
uöt8
*)0x0)

	)

7 
	#AVAILABLE_MEMORY_BASE
 0x150000

	)

8 
	#AVAILABLE_MEMORY_SIZE
 (80*
MB
/
BLOCK_SIZE
)

9 
	#TABLE_SIZE
 (
AVAILABLE_MEMORY_SIZE
/8)

	)

11 
	#FREE
 0

	)

12 
	#BUSY
 1

	)

14 
	#NO_SUITABLE_BLOCK
 -1

	)

15 
	#NO_SUITABLE_SEGMENT
 -1

	)

17 
boﬁ
 
IsBlockFªe
–
id
 );

18 
SëBlockSèãFªe
–
id
);

19 
SëBlockSèãBusy
–
id
 );

20 
SórchFªeSegmít
(
size
);

21 
SëBlocksSegmítFªe
(
fú°Id
, 
cou¡
);

22 
SëBlocksSegmítBusy
(
fú°Id
, 
cou¡
);

23 * 
TabÀIndexToPoöãr
(
ödex
);

24 
PoöãrToTabÀIndex
–*
poöãr
 );

30 
	$InôMem‹y
(){

31  
i
=0; i<
TABLE_SIZE
; ++i)

32 
MEMORY_TABLE_BASE
[
i
]=0x0;

33 
	}
}

35 * 
	$AŒoˇã
–
size
 ){

36 
•a˚Fú°BlockId
 = 
	`SórchFªeSegmít
–
size
 );

37 if–
•a˚Fú°BlockId
 =
NO_SUITABLE_SEGMENT
 )

39 
	`SëBlocksSegmítBusy
–
•a˚Fú°BlockId
, 
size
 );

40  
	`TabÀIndexToPoöãr
(
•a˚Fú°BlockId
);

41 
	}
}

43 
boﬁ
 
	$Fªe
–*
poöãr
, 
size
 ){

44 
èbÀIndex
 = 
	`PoöãrToTabÀIndex
–
poöãr
 );

45 if–
èbÀIndex
 =
NO_SUITABLE_BLOCK
 )

46  
Ál£
;

47 
	`SëBlocksSegmítFªe
–
èbÀIndex
, 
size
);

48  
åue
;

49 
	}
}

55 
	$SórchFªeSegmít
(
size
){

56 
i
, 
foundedFªeSegmítSize
;

57  
i
=0; i<
AVAILABLE_MEMORY_SIZE
; ++i){

58 if–
	`IsBlockFªe
(
i
) ){

59 
foundedFªeSegmítSize
++;

60 if–
foundedFªeSegmítSize
 =
size
 )

61  
i
-
size
+1;

63 
foundedFªeSegmítSize
=0;

65  
NO_SUITABLE_SEGMENT
;

66 
	}
}

69 
	$SëBlocksSegmítFªe
(
fú°Id
, 
cou¡
){

70  
i
=0; i<
cou¡
; ++i )

71 
	`SëBlockSèãFªe
–
fú°Id
+
i
 );

72 
	}
}

74 
	$SëBlocksSegmítBusy
(
fú°Id
, 
cou¡
){

75  
i
=0; i<
cou¡
; ++i )

76 
	`SëBlockSèãBusy
–
fú°Id
+
i
 );

77 
	}
}

80 
ölöe
 * 
	$TabÀIndexToPoöãr
(
ödex
){

81  (*)
AVAILABLE_MEMORY_BASE
 + 
ödex
*
BLOCK_SIZE
;

82 
	}
}

84 
ölöe
 
	$PoöãrToTabÀIndex
–*
poöãr
 ){

85 
uöt32
 
poöãrOff£t
 = (uöt32)
poöãr
 - 
AVAILABLE_MEMORY_BASE
;

86 if–
poöãrOff£t
 % 
BLOCK_SIZE
 != 0 )

87  
NO_SUITABLE_BLOCK
;

88 
èbÀIndex
 = 
poöãrOff£t
/
BLOCK_SIZE
;

89 if–
èbÀIndex
 >
AVAILABLE_MEMORY_SIZE
 )

90  
NO_SUITABLE_BLOCK
;

91  
èbÀIndex
;

92 
	}
}

94 
boﬁ
 
	$IsBlockFªe
–
id
 ){

95  
MEMORY_TABLE_BASE
[
id
/8]&(1<<(id%8));

96 
	}
}

98 
	$SëBlockSèãFªe
–
id
){

99 
MEMORY_TABLE_BASE
[
id
/8] |= (1<<(id%8));

100 
	}
}

102 
	$SëBlockSèãBusy
–
id
 ){

103 
MEMORY_TABLE_BASE
[
id
/8] &= !(1<<(id%8));

104 
	}
}

	@common/pci.c

1 
	~<ma¸os.h
>

2 
	~<pci.h
>

6 
uöt32
 
	mzîos
:2;

7 
uöt32
 
	mªg
:6;

8 
uöt32
 
	mfunc
:3;

9 
uöt32
 
	mdev
:5;

10 
uöt32
 
	mbus
:8;

11 
uöt32
 
	mªvî£d
:7;

12 
uöt32
 
	míabÀ
:1;

14 
uöt32
 
	mvÆue
;

15 }
	tPCI_addr
;

17 
uöt32
 
	$PCI_RódUI¡32
–
PCI_Uaddr
 
uaddr
, 
uöt8
 
ªg
){

18 
PCI_addr
 
addr
;

19 
addr
.
vÆue
=0;

20 
addr
.
ªg
=reg;

21 
addr
.
func
=
uaddr
.func;

22 
addr
.
dev
=
uaddr
.dev;

23 
addr
.
bus
=
uaddr
.bus;

24 
addr
.
íabÀ
=1;

25 
	`oué
–
PCI_PORT_ADDR
, 
addr
.
vÆue
);

26  
	`öl
–
PCI_PORT_DATA
 );

27 
	}
}

29 
boﬁ
 
	$PCI_RódHódî
–
PCI_Uaddr
 
addr
, 
PCI_Hódî
 *
hódî
){

30  
uöt8
 
ªg
=0;reg<4;++reg )

31 
hódî
->
vÆue
[
ªg
] = 
	`PCI_RódUI¡32
–
addr
,Ñeg );

32 if–
hódî
->
víd‹Id
==0xfff‡|| hódî->víd‹Id==0x0 || hódî->
devi˚Id
==0x0 )

33  
Ál£
;

34  
åue
;

35 
	}
}

37 
PCI_Uaddr
 
	gRecognizedDevi˚s
[256][256][
PCI_MAX_SAME_DEVICES
];

38 
uöt8
 
	gRecognizedDevi˚s_Cou¡
[256][256];

39 
	$PCI_Sˇn
(){

40 
PCI_Uaddr
 
addr
;

41 
PCI_Hódî
 
hódî
;

42  
addr
.
bus
=0;áddr.bus<
PCI_MAX_BUSES
; ++addr.bus){

43  
addr
.
dev
=0;áddr.dev<
PCI_MAX_DEVICES
; ++addr.dev){

44 
addr
.
func
=0;

45 if–! 
	`PCI_RódHódî
–
addr
, &
hódî
) )

47 if–
RecognizedDevi˚s_Cou¡
[
hódî
.
Cœss
][hódî.
sub˛ass
]<
PCI_MAX_SAME_DEVICES
 )

48 
RecognizedDevi˚s
[
hódî
.
Cœss
][hódî.
sub˛ass
][
RecognizedDevi˚s_Cou¡
[hódî.Cœss][hódî.sub˛ass]++]=
addr
;

49 if–
hódî
.
hódîTy≥
 & 
PCI_HEADERTYPE_MULTIFUNC
 ){

50  
addr
.
func
=1;áddr.func<
PCI_MAX_FUNCTIONS
; ++addr.func ){

51 if–! 
	`PCI_RódHódî
–
addr
, &
hódî
) )

53 if–
RecognizedDevi˚s_Cou¡
[
hódî
.
Cœss
][hódî.
sub˛ass
]<
PCI_MAX_SAME_DEVICES
 )

54 
RecognizedDevi˚s
[
hódî
.
Cœss
][hódî.
sub˛ass
][
RecognizedDevi˚s_Cou¡
[hódî.Cœss][hódî.sub˛ass]++]=
addr
;

59 
	}
}

	@common/pm.c

1 
	$Des¸ùt‹
–
uöt32
 
ba£
, uöt32 
limô
, 
uöt15
 
Aâribuãs
){

3 
	}
}

	@common/run.c

1 
	~<run.h
>

2 
	~<fs.h
>

	@include/ata.h

33 
	~<ty≥s.h
>

35 
	#ATAPIO_ERROR
 0x0

	)

36 
	#ATAPIO_DONE
 0x1

	)

37 
	#ATAPIO_FAULT
 0x2

	)

38 
	#SECTOR_SIZE
 512

	)

41 
	mma°î
,

42 
	m¶ave


43 } 
	tdrive
;

45 
boﬁ
 
	tATA_CHANNEL
;

46 
boﬁ
 
	tATA_DEVICE_ID
;

47 
ATAPIO_Ród
–
uöt32
 
°¨t
, 
uöt8
 
cou¡
, 
drive
 
Drive
, * 
d°
 );

48 
ATAPIO_Wrôe
–
uöt32
 
°¨t
, 
uöt8
 
cou¡
, 
drive
 
Drive
, c⁄° * 
§c1
);

	@include/cn_string.h

1 #¥agm®
⁄˚


3 
	$°rcmp
(c⁄° *
a
, c⁄° *
b
){

4 
i
;

5 
i
=0; 
a
[i]==
b
[i] &&á[i]!=0; ++i)

7  
a
[
i
]-
b
[i];

8 
	}
}

10 
	$°rcm∂
(c⁄° *
a
, c⁄° *
b
, 
Àn
){

11 
i
;

12 
i
=0; 
a
[i]==
b
[i] &&á[i]!=0 && i<
Àn
; ++i)

14 if(
i
==
Àn
)

16  
a
[
i
]-
b
[i];

17 
	}
}

	@include/cpp.h

1 
	#CPP


	)

	@include/fat32.h

1 #¥agm®
⁄˚


2 
	~<ty≥s.h
>

4 
	#PATH_INVALID
 1

	)

6 
	sF©32_DúMembî
{

7 
	mfûíame
[11];

10 
uöt8
 
	mªad⁄ly
: 1;

11 
uöt8
 
	mhiddí
: 1;

12 
uöt8
 
	msy°em
: 1;

13 
uöt8
 
	mvﬁumeId
: 1;

14 
uöt8
 
	mdúe˘‹y
: 1;

15 
uöt8
 
	m¨chive
: 1;

16 
uöt8
 
	munu£d
: 2;

17 }
	m©åib
;

18 
uöt8
 
	m©åibByã
;

20 
uöt32
 
	mfú°Clu°î
;

21 
uöt32
 
	mfûeSize
;

22 
uöt32
 
	mªc‹dClu°î
;

23 
uöt8
 
	mªc‹dId
;

27 
uöt8
 
	mfûeSy°em
;

28 
	mfûíame
[11];

29 
uöt32
 
	mfú°Clu°î
;

30 
uöt8
 *
	mbuf„r
;

31 
uöt32
 
	mfûeSize
;

32 
uöt32
 
	mpoöãr
;

33 
uöt32
 
	mªc‹dClu°î
;

34 
uöt8
 
	mªc‹dId
;

35 } 
	tFAT32_FILE
;

38 
boﬁ
 
F©32_GëDúNextMembî
–
F©32_DúMembî
 * 
ªzu…
 );

39 
F©32_Sñe˘Dúe˘‹y
–
uöt32
 
˛u°î
 );

40 
F©32_NameToSh‹t
–c⁄° *
«me
, * 
ªzu…
);

41 
boﬁ
 
F©32_SórchMembî
–
uöt32
,c⁄° *
«me
, 
F©32_DúMembî
 *
ªzu…
 );

42 
boﬁ
 
F©32_Inô
–
uöt32
 );

43 
boﬁ
 
F©32_›í
–
uöt32
, c⁄° *,
FAT32_FILE
 *);

45 
uöt32
 
F©32_Ród
–
FAT32_FILE
 *
f
, *
d©a
, uöt32 
size
);

46 
uöt32
 
F©32_Wrôe
–
FAT32_FILE
 *
f
, *
d©a
, uöt32 
size
);

48 
F©32_DñëeFûe
–
F©32_DúMembî
*);

49 
boﬁ
 
F©32_Cª©eFûe
–c⁄° *
∑th
, c⁄° *
fûíame
, boﬁ 
dú
);

	@include/fs.h

1 #¥agm®
⁄˚


3 
	#FILE_SEEK_FROMSTART
 0

	)

4 
	#FILE_SEEK_FROMEND
 1

	)

5 
	#FILE_SEEK_OFFSET
 2

	)

7 
LﬂdP¨tôi⁄s
();

8 
boﬁ
 
Sñe˘Disk
–
uöt8
 
id
 );

	@include/io.h

1 
	~<ty≥s.h
>

2 
	~<ma¸os.h
>

4 
	#VIDEOBUFFER
 ((
uöt16
*Ë0xB8000)

	)

6 
	#SCREEN_WIDTH
 80

	)

7 
	#SCREEN_HEIGHT
 25

	)

9 
	#COLOR_BLACK
 0x0

	)

10 
	#COLOR_BLUE
 0x1

	)

11 
	#COLOR_GREEN
 0x2

	)

12 
	#COLOR_CYAN
 0x3

	)

13 
	#COLOR_RED
 0x4

	)

14 
	#COLOR_MAGENTA
 0x5

	)

15 
	#COLOR_BROWN
 0x6

	)

16 
	#COLOR_LIGHTGRAY
 0x7

	)

17 
	#COLOR_DARKGREY
 0x8

	)

18 
	#COLOR_LIGHTBLUE
 0x9

	)

19 
	#COLOR_LIGHTGREEN
 0xa

	)

20 
	#COLOR_LIGHTCYAN
 0xb

	)

21 
	#COLOR_LIGHTRED
 0xc

	)

22 
	#COLOR_LIGHTMAGENTA
 0xd

	)

23 
	#COLOR_YELLOW
 0xe

	)

24 
	#COLOR_WHITE
 0xf

	)

26 
	#COLOR_GET
(
bc
, 
fc
Ë–(bc<<4)|f¯)

	)

27 
	#PUTC_POS
(
ch
,
˛
,
x
,
y
Ë–
VIDEOBUFFER
[x+y*
SCREEN_WIDTH
]=ch|(˛<<8Ë)

	)

29 
CÀ¨S¸ìn
();

30 
putch¨
(
a
);

31 
gëch¨
();

32 
¥ötf
(c⁄° *
f‹m©
,...);

33 
sˇnf
(c⁄° *
f‹m©
,...);

	@include/macros.h

1 #¥agm®
⁄˚


2 
	~<ty≥s.h
>

5 
ölöe
 
uöt8
 
	$öb
(
uöt16
 
p‹t
){

6 
uöt8
 
ªt
;

7 
asm
 vﬁ©ûe–"öb %1,%0" : "˜"(
ªt
Ë: "Nd"(
p‹t
) );

8  
ªt
;

9 
	}
}

10 
ölöe
 
uöt16
 
	$öw
(
uöt16
 
p‹t
){

11 
uöt16
 
ªt
;

12 
asm
 vﬁ©ûe–"öw %1,%0" : "˜"(
ªt
Ë: "Nd"(
p‹t
) );

13  
ªt
;

14 
	}
}

15 
ölöe
 
uöt32
 
	$öl
(
uöt16
 
p‹t
){

16 
uöt32
 
ªt
;

17 
asm
 vﬁ©ûe–"ö»%1,%0" : "˜"(
ªt
Ë: "Nd"(
p‹t
) );

18  
ªt
;

19 
	}
}

20 
ölöe
 
	$ªpInsw
(
uöt16
 
p‹t
, uöt16* 
d©a
, uöt16 
cou¡
){

21 
asm
 vﬁ©ûe–"ª∞ösw" :: "Nd"(
p‹t
), "D"(
d©a
), "c"(
cou¡
) );

22 
	}
}

24 
ölöe
 
	$outb
(
uöt16
 
p‹t
, 
uöt8
 
vÆue
){

25 
asm
 vﬁ©ûe–"outb %0, %1" : : "a"(
vÆue
), "Nd"(
p‹t
) );

26 
	}
}

27 
ölöe
 
	$outw
(
uöt16
 
p‹t
, uöt16 
vÆue
){

28 
asm
 vﬁ©ûe–"outw %0, %1" : : "a"(
vÆue
), "Nd"(
p‹t
) );

29 
	}
}

30 
ölöe
 
	$oué
(
uöt16
 
p‹t
, 
uöt32
 
vÆue
){

31 
asm
 vﬁ©ûe–"oué %0, %1" : : "a"(
vÆue
), "Nd"(
p‹t
) );

32 
	}
}

	@include/memory.h

1 
	~<ty≥s.h
>

3 
	#BLOCK_SIZE
 0x400

	)

5 
InôMem‹y
();

6 * 
AŒoˇã
–
blockcou¡
 );

7 
boﬁ
 
Fªe
–*
addr
, 
size
);

	@include/pci.h

1 #¥agm®
⁄˚


3 
	~<ty≥s.h
>

5 
	#PCI_PORT_ADDR
 0xcf8

	)

6 
	#PCI_PORT_DATA
 0xcfc

	)

8 
	#PCI_MAX_BUSES
 0xff

	)

9 
	#PCI_MAX_DEVICES
 0x20

	)

10 
	#PCI_MAX_FUNCTIONS
 0x8

	)

12 
	#PCI_HEADERTYPE_NORMAL
 0x0

	)

13 
	#PCI_HEADERTYPE_BRIGE
 0x1

	)

14 
	#PCI_HEADERTYPE_CARDBUS
 0x2

	)

15 
	#PCI_HEADERTYPE_MULTIFUNC
 0x80

	)

17 
	#PCI_MAX_SAME_DEVICES
 0x10

	)

19 
	s_Packed
{

20 
uöt8
 
	mbus
;

21 
uöt8
 
	mdev
;

22 
uöt8
 
	mfunc
;

23 }
	tPCI_Uaddr
;

27 
uöt16
 
	mvíd‹Id
;

28 
uöt16
 
	mdevi˚Id
;

29 
uöt16
 
	mcomm™d
;

30 
uöt16
 
	m°©us
;

31 
uöt8
 
	mªcognizeId
;

32 
uöt8
 
	m¥ogIF
;

33 
uöt8
 
	msub˛ass
;

34 
uöt8
 
	mCœss
;

35 
uöt8
 
	m˛s
;

36 
uöt8
 
	mœãncyTimî
;

37 
uöt8
 
	mhódîTy≥
;

38 
uöt8
 
	mBIST
;

40 
uöt32
 
	mvÆue
[4];

41 }
	tPCI_Hódî
;

43 
uöt32
 
PCI_RódUI¡32
–
PCI_Uaddr
 
addr
, 
uöt8
 
ªg
);

44 
boﬁ
 
PCI_RódHódî
–
PCI_Uaddr
 
addr
, 
PCI_Hódî
 *
hódî
);

45 
PCI_Sˇn
();

	@include/pm.h

	@include/types.h

1 
	töt8
;

2 
	töt16
;

3 
	töt32
;

4 
	tuöt8
;

5 
	tuöt16
;

6 
	tuöt32
;

8 
	#NULL
 0

	)

10 #i‚de‡
CPP


11 
uöt8
 
	tboﬁ
;

12 
	#åue
 1

	)

13 
	#Ál£
 0

	)

	@kernel.c

1 
	~<ty≥s.h
>

2 
	~<io.h
>

3 
	~<©a.h
>

4 
	~<mem‹y.h
>

5 
	~<pci.h
>

6 
	~<Át32.h
>

7 
	~<fs.h
>

9 
	$maö
(){

10 
	`InôMem‹y
();

11 
	`LﬂdP¨tôi⁄s
();

12 
	`CÀ¨S¸ìn
();

13 
a
[]="qwetsss";

14 
	`¥ötf
("Hîênumbî %dánd såög \"%s\"", 456,
a
);

16 
	}
}

	@/usr/include/memory.h

22 #i‚def 
_MEMORY_H


23 
	#_MEMORY_H
 1

	)

25 
	~<„©uªs.h
>

28 #i‚def 
_STRING_H


29 
	~<°rög.h
>

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

98 #unde‡
__USE_ISOC11


99 #unde‡
__USE_ISOC99


100 #unde‡
__USE_ISOC95


101 #unde‡
__USE_ISOCXX11


102 #unde‡
__USE_POSIX


103 #unde‡
__USE_POSIX2


104 #unde‡
__USE_POSIX199309


105 #unde‡
__USE_POSIX199506


106 #unde‡
__USE_XOPEN


107 #unde‡
__USE_XOPEN_EXTENDED


108 #unde‡
__USE_UNIX98


109 #unde‡
__USE_XOPEN2K


110 #unde‡
__USE_XOPEN2KXSI


111 #unde‡
__USE_XOPEN2K8


112 #unde‡
__USE_XOPEN2K8XSI


113 #unde‡
__USE_LARGEFILE


114 #unde‡
__USE_LARGEFILE64


115 #unde‡
__USE_FILE_OFFSET64


116 #unde‡
__USE_BSD


117 #unde‡
__USE_SVID


118 #unde‡
__USE_MISC


119 #unde‡
__USE_ATFILE


120 #unde‡
__USE_GNU


121 #unde‡
__USE_REENTRANT


122 #unde‡
__USE_FORTIFY_LEVEL


123 #unde‡
__FAVOR_BSD


124 #unde‡
__KERNEL_STRICT_NAMES


128 #i‚de‡
_LOOSE_KERNEL_NAMES


129 
	#__KERNEL_STRICT_NAMES


	)

133 
	#__USE_ANSI
 1

	)

142 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


143 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

144 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

146 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

151 #i‡
deföed
 
_BSD_SOURCE
 && \

152 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

153 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

154 
	#__FAVOR_BSD
 1

	)

158 #ifde‡
_GNU_SOURCE


159 #unde‡
_ISOC95_SOURCE


160 
	#_ISOC95_SOURCE
 1

	)

161 #unde‡
_ISOC99_SOURCE


162 
	#_ISOC99_SOURCE
 1

	)

163 #unde‡
_ISOC11_SOURCE


164 
	#_ISOC11_SOURCE
 1

	)

165 #unde‡
_POSIX_SOURCE


166 
	#_POSIX_SOURCE
 1

	)

167 #unde‡
_POSIX_C_SOURCE


168 
	#_POSIX_C_SOURCE
 200809L

	)

169 #unde‡
_XOPEN_SOURCE


170 
	#_XOPEN_SOURCE
 700

	)

171 #unde‡
_XOPEN_SOURCE_EXTENDED


172 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

173 #unde‡
_LARGEFILE64_SOURCE


174 
	#_LARGEFILE64_SOURCE
 1

	)

175 #unde‡
_BSD_SOURCE


176 
	#_BSD_SOURCE
 1

	)

177 #unde‡
_SVID_SOURCE


178 
	#_SVID_SOURCE
 1

	)

179 #unde‡
_ATFILE_SOURCE


180 
	#_ATFILE_SOURCE
 1

	)

185 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

186 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

187 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

188 
	#_BSD_SOURCE
 1

	)

189 
	#_SVID_SOURCE
 1

	)

193 #i‡(
deföed
 
_ISOC11_SOURCE
 \

194 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

195 
	#__USE_ISOC11
 1

	)

199 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

200 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

201 
	#__USE_ISOC99
 1

	)

205 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

206 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

207 
	#__USE_ISOC95
 1

	)

214 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

215 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

216 
	#__USE_ISOCXX11
 1

	)

221 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

222 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

223 
	#_POSIX_SOURCE
 1

	)

224 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

225 
	#_POSIX_C_SOURCE
 2

	)

226 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

227 
	#_POSIX_C_SOURCE
 199506L

	)

228 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

229 
	#_POSIX_C_SOURCE
 200112L

	)

231 
	#_POSIX_C_SOURCE
 200809L

	)

233 
	#__USE_POSIX_IMPLICITLY
 1

	)

236 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


237 
	#__USE_POSIX
 1

	)

240 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


241 
	#__USE_POSIX2
 1

	)

244 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

245 
	#__USE_POSIX199309
 1

	)

248 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

249 
	#__USE_POSIX199506
 1

	)

252 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

253 
	#__USE_XOPEN2K
 1

	)

254 #unde‡
__USE_ISOC95


255 
	#__USE_ISOC95
 1

	)

256 #unde‡
__USE_ISOC99


257 
	#__USE_ISOC99
 1

	)

260 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

261 
	#__USE_XOPEN2K8
 1

	)

262 #unde‡
_ATFILE_SOURCE


263 
	#_ATFILE_SOURCE
 1

	)

266 #ifdef 
_XOPEN_SOURCE


267 
	#__USE_XOPEN
 1

	)

268 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

269 
	#__USE_XOPEN_EXTENDED
 1

	)

270 
	#__USE_UNIX98
 1

	)

271 #unde‡
_LARGEFILE_SOURCE


272 
	#_LARGEFILE_SOURCE
 1

	)

273 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

274 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

275 
	#__USE_XOPEN2K8
 1

	)

276 
	#__USE_XOPEN2K8XSI
 1

	)

278 
	#__USE_XOPEN2K
 1

	)

279 
	#__USE_XOPEN2KXSI
 1

	)

280 #unde‡
__USE_ISOC95


281 
	#__USE_ISOC95
 1

	)

282 #unde‡
__USE_ISOC99


283 
	#__USE_ISOC99
 1

	)

286 #ifde‡
_XOPEN_SOURCE_EXTENDED


287 
	#__USE_XOPEN_EXTENDED
 1

	)

292 #ifde‡
_LARGEFILE_SOURCE


293 
	#__USE_LARGEFILE
 1

	)

296 #ifde‡
_LARGEFILE64_SOURCE


297 
	#__USE_LARGEFILE64
 1

	)

300 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

301 
	#__USE_FILE_OFFSET64
 1

	)

304 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


305 
	#__USE_MISC
 1

	)

308 #ifdef 
_BSD_SOURCE


309 
	#__USE_BSD
 1

	)

312 #ifdef 
_SVID_SOURCE


313 
	#__USE_SVID
 1

	)

316 #ifdef 
_ATFILE_SOURCE


317 
	#__USE_ATFILE
 1

	)

320 #ifdef 
_GNU_SOURCE


321 
	#__USE_GNU
 1

	)

324 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


325 
	#__USE_REENTRANT
 1

	)

328 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

329 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

330 #i‡
_FORTIFY_SOURCE
 > 1

331 
	#__USE_FORTIFY_LEVEL
 2

	)

333 
	#__USE_FORTIFY_LEVEL
 1

	)

336 
	#__USE_FORTIFY_LEVEL
 0

	)

341 
	~<°dc-¥edef.h
>

349 #unde‡
__GNU_LIBRARY__


350 
	#__GNU_LIBRARY__
 6

	)

354 
	#__GLIBC__
 2

	)

355 
	#__GLIBC_MINOR__
 17

	)

357 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

358 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

361 #i‡
deföed
 
__GNUC__
 \

362 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

363 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

364 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

365 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

369 #i‚de‡
__ASSEMBLER__


370 #i‚de‡
_SYS_CDEFS_H


371 
	~<sys/cdefs.h
>

376 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


377 
	#__USE_LARGEFILE
 1

	)

378 
	#__USE_LARGEFILE64
 1

	)

384 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

385 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

386 && 
deföed
 
	g__exã∫_ölöe


387 
	#__USE_EXTERN_INLINES
 1

	)

395 
	~<gnu/°ubs.h
>

	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

170 || 
deföed
 
__USE_XOPEN2K8


172 *
	$°rdup
 (c⁄° *
__s
)

173 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

179 #i‡
deföed
 
__USE_XOPEN2K8


180 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

181 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

184 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


186 
	#°rdu∑
(
s
) \

187 (
__exãnsi⁄__
 \

189 c⁄° *
__ﬁd
 = (
s
); \

190 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

191 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

192 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

193 
	}
}))

	)

196 
	#°∫du∑
(
s
, 
n
) \

197 (
__exãnsi⁄__
 \

199 c⁄° *
__ﬁd
 = (
s
); \

200 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

201 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

202 
__√w
[
__Àn
] = '\0'; \

203 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

204 }))

	)

207 
	g__BEGIN_NAMESPACE_STD


209 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


212 *
°rchr
 (*
__s
, 
__c
)

213 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

214 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

215 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 #ifde‡
__OPTIMIZE__


218 
__exã∫_Æways_ölöe
 *

219 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


221  
__buûtö_°rchr
 (
__s
, 
__c
);

224 
__exã∫_Æways_ölöe
 const *

225 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


227  
__buûtö_°rchr
 (
__s
, 
__c
);

232 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

233 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

236 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


239 *
	`°ºchr
 (*
__s
, 
__c
)

240 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

241 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

242 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 #ifde‡
__OPTIMIZE__


245 
__exã∫_Æways_ölöe
 *

246 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


248  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

251 
__exã∫_Æways_ölöe
 const *

252 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


254  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

257 
	}
}

259 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

260 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

262 
__END_NAMESPACE_STD


264 #ifde‡
__USE_GNU


267 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


268 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

269 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

270 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

271 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

274 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

278 
__BEGIN_NAMESPACE_STD


281 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

282 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

285 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

286 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


291 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

292 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

293 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

294 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 #ifde‡
__OPTIMIZE__


297 
__exã∫_Æways_ölöe
 *

298 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


300  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

303 
__exã∫_Æways_ölöe
 const *

304 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


306  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

309 
	}
}

311 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

312 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

315 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


318 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

319 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

320 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

321 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 #ifde‡
__OPTIMIZE__


324 
__exã∫_Æways_ölöe
 *

325 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


327  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

330 
__exã∫_Æways_ölöe
 const *

331 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


333  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

336 
	}
}

338 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

339 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

344 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

345 
__THROW
 
	`__n⁄nuŒ
 ((2));

346 
__END_NAMESPACE_STD


350 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

351 c⁄° *
__ª°ri˘
 
__dñim
,

352 **
__ª°ri˘
 
__ßve_±r
)

353 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

354 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


355 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

360 #ifde‡
__USE_GNU


362 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


363 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

364 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

365 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

366 c⁄° *
__√edÀ
)

367 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

370 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

374 #ifde‡
__USE_GNU


378 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

379 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

380 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

384 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

385 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

386 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

387 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

388 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

389 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

393 
__BEGIN_NAMESPACE_STD


395 
size_t
 
	$°æí
 (c⁄° *
__s
)

396 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

397 
__END_NAMESPACE_STD


399 #ifdef 
__USE_XOPEN2K8


402 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

403 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

407 
__BEGIN_NAMESPACE_STD


409 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

410 
__END_NAMESPACE_STD


411 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


419 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


422 #ifde‡
__REDIRECT_NTH


423 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

424 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

425 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

427 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

428 
__THROW
 
	`__n⁄nuŒ
 ((2));

429 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

434 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

435 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

439 #ifde‡
__USE_XOPEN2K8


441 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

447 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

449 #ifde‡
__USE_BSD


451 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

452 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

455 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

458 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

459 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

462 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


465 *
	`ödex
 (*
__s
, 
__c
)

466 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

467 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

468 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

470 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


471 
__exã∫_Æways_ölöe
 *

472 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


474  
	`__buûtö_ödex
 (
__s
, 
__c
);

477 
__exã∫_Æways_ölöe
 const *

478 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


480  
	`__buûtö_ödex
 (
__s
, 
__c
);

483 
	}
}

485 *
	$ödex
 (c⁄° *
__s
, 
__c
)

486 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

490 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


493 *
	`rödex
 (*
__s
, 
__c
)

494 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

495 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

496 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

498 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


499 
__exã∫_Æways_ölöe
 *

500 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


502  
	`__buûtö_rödex
 (
__s
, 
__c
);

505 
__exã∫_Æways_ölöe
 const *

506 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


508  
	`__buûtö_rödex
 (
__s
, 
__c
);

511 
	}
}

513 *
	$rödex
 (c⁄° *
__s
, 
__c
)

514 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

519 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

523 #ifdef 
__USE_GNU


524 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

525 #ifde‡
__GNUC__


526 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

527 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

532 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

533 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

536 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 #ifdef 
__USE_GNU


543 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

544 
__loˇÀ_t
 
__loc
)

545 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

547 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

548 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

552 #ifdef 
__USE_BSD


555 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

556 c⁄° *
__ª°ri˘
 
__dñim
)

557 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

560 #ifdef 
__USE_XOPEN2K8


562 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

565 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

566 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

567 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

573 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

575 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

576 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

580 #ifdef 
__USE_GNU


582 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

583 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

586 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

589 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #i‚de‡
ba£«me


596 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


597 "C++" *
	$ba£«me
 (*
__fûíame
)

598 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

599 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

602 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

608 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

609 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

610 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


630 
	~<bôs/°rög.h
>

633 
	~<bôs/°rög2.h
>

636 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


638 
	~<bôs/°rög3.h
>

642 
__END_DECLS


	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

30 
	~<bôs/¥edefs.h
>

34 
	#__STDC_ISO_10646__
 201103L

	)

37 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@
1
.
1
/usr/include
28
468
bin/0.c
common/ata.c
common/fs/fat32.c
common/fs/fat32_lowLevel.c
common/fs/fat32_lowLevel.h
common/fs/fs.c
common/io.c
common/memory.c
common/pci.c
common/pm.c
common/run.c
include/ata.h
include/cn_string.h
include/cpp.h
include/fat32.h
include/fs.h
include/io.h
include/macros.h
include/memory.h
include/pci.h
include/pm.h
include/types.h
kernel.c
/usr/include/memory.h
/usr/include/features.h
/usr/include/string.h
/usr/include/stdc-predef.h
/usr/include/xlocale.h
